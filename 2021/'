; Finished: 26-nov-2020 (started a year before lmao)

(load "~/quicklisp/setup.lisp")

(ql:quickload "cl-ppcre")

(defun get-file (filename)
  "Get the content of the file as integers"
  (with-open-file (stream filename)
	 (loop for line = (read-line stream nil)
			 while line
			 collect line)))

(defun first-part-solution ()
  (let (
		  (lines '0)
		  (count '0)
		  (iteration '0)
		  (columns 12)
		  )
	 (let ((most_common_bits (loop while (< iteration columns)
			 do
				(setq count 0)
				(setq lines 0)
				(dolist (line (get-file "3-input.txt"))
					(setq count (+ count (digit-char-p (char line iteration))))
					(setq lines (+ lines 1))
				)
				 (if (> count  (/ lines 2))
					(setq count 1)
					(setq count 0)
					)
				(setq iteration (+ 1 iteration))
		  	 collect count)))

	 	(let ((gamma '0) (epsilon '0) (it '0) (power '0))
			(loop for bit in most_common_bits
					do
					(setq power (- (length most_common_bits) 1 it))
					(setq gamma (+ gamma (binary-to-decimal bit power)))
					(setq epsilon (+ epsilon (binary-to-decimal (flip bit) power)))
					(setq it (+ 1 it))
			)
			(format t "~D ~D ~%" gamma epsilon)
			(format t "~D ~%" (* gamma epsilon))
		)
	 )))

(defun flip (bit)
  (if (= bit 0)
	 (return-from flip 1)
	 (return-from flip 0)
  )
  )

(defun binary-to-decimal (bit power)
  (* bit (expt 2 power))
  )

; SECOND PART

(defun second-part-solution ()
  (let (
		  (lines '0)
		  (count '0)
		  (most_common_bit '0)
		  (iteration '0)
		  (conditions ())
		  (inputs (get-file "3-input-test.txt"))
		  )
	 (loop while (< iteration 5)
			 do
				(setq count 0)
				(setq lines 0)
				(dolist (line (get-file "3-input-test.txt"))
					(setq count (+ count (digit-char-p (char line iteration))))
					(setq lines (+ lines 1))
				)
				 (if (> count  (/ lines 2))
					(setq count 1)
					(setq count 0)
				)
				(setq inputs (loop for line in inputs
				  		when (= count (digit-char-p (char line iteration)))
						collect line
				))
			(setq iteration (+ 1 iteration))
		)
	 )
	 )
  ;)

; run both solutions
(first-part-solution)
(second-part-solution)

